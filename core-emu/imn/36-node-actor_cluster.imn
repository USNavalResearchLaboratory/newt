node n1 {
    type router
    model mdr
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.0.1/32
	 ipv6 address 2001:0::1/128
	!
    }
    canvas c1
    iconcoords {143.0 79.0}
    labelcoords {143.0 111.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n1_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n1.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}


node n2 {
    type router
    model mdr
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 10.0.0.2/32
	 ipv6 address 2001:0::2/128
	!
    }
    canvas c1
    iconcoords {282.0 77.0}
    labelcoords {282.0 109.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n2_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n2.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n3 {
    type router
    model mdr
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 10.0.0.3/32
	 ipv6 address 2001:0::3/128
	!
    }
    canvas c1
    iconcoords {421.0 79.0}
    labelcoords {421.0 111.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n3_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n3.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n4 {
    type router
    model mdr
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.0.4/32
	 ipv6 address 2001:0::4/128
	!
    }
    canvas c1
    iconcoords {571.0 84.0}
    labelcoords {571.0 116.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n4_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n4.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n5 {
    type router
    model mdr
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 10.0.0.5/32
	 ipv6 address 2001:0::5/128
	!
    }
    canvas c1
    iconcoords {723.0 78.0}
    labelcoords {723.0 110.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n5_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n5.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n6 {
    type router
    model mdr
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.0.6/32
	 ipv6 address 2001:0::6/128
	!
    }
    canvas c1
    iconcoords {151.0 175.0}
    labelcoords {151.0 207.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n6_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n6.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n7 {
    type router
    model mdr
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.0.7/32
	 ipv6 address 2001:0::7/128
	!
    }
    canvas c1
    iconcoords {286.0 171.0}
    labelcoords {286.0 203.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n7_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n7.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n8 {
    type router
    model mdr
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.0.8/32
	 ipv6 address 2001:0::8/128
	!
    }
    canvas c1
    iconcoords {425.0 174.0}
    labelcoords {425.0 206.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n8_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n8.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n9 {
    type router
    model mdr
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.0.9/32
	 ipv6 address 2001:0::9/128
	!
    }
    canvas c1
    iconcoords {575.0 167.0}
    labelcoords {575.0 199.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n9_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n9.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n10 {
    type router
    model mdr
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.0.10/32
	 ipv6 address 2001:0::10/128
	!
    }
    canvas c1
    iconcoords {733.0 163.0}
    labelcoords {733.0 195.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n10_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n10.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n11 {
    type router
    model mdr
    network-config {
	hostname n11
	!
	interface eth0
	 ip address 10.0.0.11/32
	 ipv6 address 2001:0::11/128
	!
    }
    canvas c1
    iconcoords {150.0 266.0}
    labelcoords {150.0 298.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n11_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n11.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n12 {
    type router
    model mdr
    network-config {
	hostname n12
	!
	interface eth0
	 ip address 10.0.0.12/32
	 ipv6 address 2001:0::12/128
	!
    }
    canvas c1
    iconcoords {297.0 254.0}
    labelcoords {297.0 286.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n12_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n12.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n13 {
    type router
    model mdr
    network-config {
	hostname n13
	!
	interface eth0
	 ip address 10.0.0.13/32
	 ipv6 address 2001:0::13/128
	!
    }
    canvas c1
    iconcoords {437.0 247.0}
    labelcoords {437.0 279.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n13_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n13.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n14 {
    type router
    model mdr
    network-config {
	hostname n14
	!
	interface eth0
	 ip address 10.0.0.14/32
	 ipv6 address 2001:0::14/128
	!
    }
    canvas c1
    iconcoords {579.0 246.0}
    labelcoords {579.0 278.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n14_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n14.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n15 {
    type router
    model mdr
    network-config {
	hostname n15
	!
	interface eth0
	 ip address 10.0.0.15/32
	 ipv6 address 2001:0::15/128
	!
    }
    canvas c1
    iconcoords {737.0 248.0}
    labelcoords {737.0 280.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n15_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n15.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n16 {
    type router
    model mdr
    network-config {
	hostname n16
	!
	interface eth0
	 ip address 10.0.0.16/32
	 ipv6 address 2001:0::16/128
	!
    }
    canvas c1
    iconcoords {146.0 371.0}
    labelcoords {146.0 403.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n16_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n16.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n17 {
    type router
    model mdr
    network-config {
	hostname n17
	!
	interface eth0
	 ip address 10.0.0.17/32
	 ipv6 address 2001:0::17/128
	!
    }
    canvas c1
    iconcoords {292.0 367.0}
    labelcoords {292.0 399.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n17_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n17.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n18 {
    type router
    model mdr
    network-config {
	hostname n18
	!
	interface eth0
	 ip address 10.0.0.18/32
	 ipv6 address 2001:0::18/128
	!
    }
    canvas c1
    iconcoords {440.0 352.0}
    labelcoords {440.0 384.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n18_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n18.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n19 {
    type router
    model mdr
    network-config {
	hostname n19
	!
	interface eth0
	 ip address 10.0.0.19/32
	 ipv6 address 2001:0::19/128
	!
    }
    canvas c1
    iconcoords {584.0 342.0}
    labelcoords {584.0 374.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n19_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n19.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n20 {
    type router
    model mdr
    network-config {
	hostname n20
	!
	interface eth0
	 ip address 10.0.0.20/32
	 ipv6 address 2001:0::20/128
	!
    }
    canvas c1
    iconcoords {735.0 329.0}
    labelcoords {735.0 361.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n20_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n20.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n21 {
    type router
    model mdr
    network-config {
	hostname n21
	!
	interface eth0
	 ip address 10.0.0.21/32
	 ipv6 address 2001:0::21/128
	!
    }
    canvas c1
    iconcoords {149.0 446.0}
    labelcoords {149.0 478.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n21_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n21.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n22 {
    type router
    model mdr
    network-config {
	hostname n22
	!
	interface eth0
	 ip address 10.0.0.22/32
	 ipv6 address 2001:0::22/128
	!
    }
    canvas c1
    iconcoords {299.0 450.0}
    labelcoords {299.0 482.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n22_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n22.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n23 {
    type router
    model mdr
    network-config {
	hostname n23
	!
	interface eth0
	 ip address 10.0.0.23/32
	 ipv6 address 2001:0::23/128
	!
    }
    canvas c1
    iconcoords {443.0 441.0}
    labelcoords {443.0 473.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n23_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n23.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n24 {
    type router
    model mdr
    network-config {
	hostname n24
	!
	interface eth0
	 ip address 10.0.0.24/32
	 ipv6 address 2001:0::24/128
	!
    }
    canvas c1
    iconcoords {586.0 429.0}
    labelcoords {586.0 461.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n24_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n24.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n25 {
    type router
    model mdr
    network-config {
	hostname n25
	!
	interface eth0
	 ip address 10.0.0.25/32
	 ipv6 address 2001:0::25/128
	!
    }
    canvas c1
    iconcoords {743.0 428.0}
    labelcoords {743.0 460.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n25_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n25.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n26 {
    type router
    model mdr
    network-config {
	hostname n26
	!
	interface eth0
	 ip address 10.0.0.26/32
	 ipv6 address 2001:0::26/128
	!
    }
    canvas c1
    iconcoords {156.0 525.0}
    labelcoords {156.0 557.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n26_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n26.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n27 {
    type router
    model mdr
    network-config {
	hostname n27
	!
	interface eth0
	 ip address 10.0.0.27/32
	 ipv6 address 2001:0::27/128
	!
    }
    canvas c1
    iconcoords {306.0 529.0}
    labelcoords {306.0 561.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n27_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n27.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n28 {
    type router
    model mdr
    network-config {
	hostname n28
	!
	interface eth0
	 ip address 10.0.0.28/32
	 ipv6 address 2001:0::28/128
	!
    }
    canvas c1
    iconcoords {450.0 520.0}
    labelcoords {450.0 552.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n28_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n28.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n29 {
    type router
    model mdr
    network-config {
	hostname n29
	!
	interface eth0
	 ip address 10.0.0.29/32
	 ipv6 address 2001:0::29/128
	!
    }
    canvas c1
    iconcoords {593.0 508.0}
    labelcoords {593.0 540.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n29_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n29.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n30 {
    type router
    model mdr
    network-config {
	hostname n30
	!
	interface eth0
	 ip address 10.0.0.30/32
	 ipv6 address 2001:0::30/128
	!
    }
    canvas c1
    iconcoords {750.0 507.0}
    labelcoords {750.0 539.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n30_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n30.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n31 {
    type router
    model mdr
    network-config {
	hostname n31
	!
	interface eth0
	 ip address 10.0.0.31/32
	 ipv6 address 2001:0::31/128
	!
    }
    canvas c1
    iconcoords {165.0 612.0}
    labelcoords {165.0 644.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n31_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n31.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n32 {
    type router
    model mdr
    network-config {
	hostname n32
	!
	interface eth0
	 ip address 10.0.0.32/32
	 ipv6 address 2001:0::32/128
	!
    }
    canvas c1
    iconcoords {315.0 616.0}
    labelcoords {315.0 648.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n32_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n32.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n33 {
    type router
    model mdr
    network-config {
	hostname n33
	!
	interface eth0
	 ip address 10.0.0.33/32
	 ipv6 address 2001:0::33/128
	!
    }
    canvas c1
    iconcoords {459.0 607.0}
    labelcoords {459.0 639.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n33_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n33.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n34 {
    type router
    model mdr
    network-config {
	hostname n34
	!
	interface eth0
	 ip address 10.0.0.34/32
	 ipv6 address 2001:0::34/128
	!
    }
    canvas c1
    iconcoords {602.0 595.0}
    labelcoords {602.0 627.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n34_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &
	
	
	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {
	
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} 'not ip6' -w n34.eth0.pcap -i eth0  < /dev/null &
	
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;
	
	}
    }
}

node n35 {
    type router
    model mdr
    network-config {
	hostname n35
	!
	interface eth0
	 ip address 10.0.0.35/32
	 ipv6 address 2001:0::35/128
	!
    }
    canvas c1
    iconcoords {750.0 595.0}
    labelcoords {750.0 627.0}
    services {zebra OSPFv3MDR vtysh SMF MgenActor pcap IPForward DefaultMulticastRoute}
    interface-peer {eth0 n36}
    custom-config {
	custom-config-id service:SMF
	custom-command SMF
	config {
	files=('startsmf.sh', )
	}
    }
    custom-config {
	custom-config-id service:SMF:startsmf.sh
	custom-command startsmf.sh
	config {
	#!/bin/sh
	# auto-generated by nrl.py:NrlSmf.generateconfig()
	nrlsmf instance n35_smf cf eth0 hash MD5 log nrlsmf.log < /dev/null > /dev/null 2>&1 &


	}
    }
    custom-config {
	custom-config-id service:pcap
	custom-command
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command.sh
	config {

	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit file length, -n disable name resolution)
	DUMPOPTS="-Uns 100"

	if [ "x$1" = "xstart" ]; then

	tcpdump ${DUMPOPTS} 'not ip6' -w n35.eth0.pcap -i eth0  < /dev/null &


	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${SESSION_DIR}/pcap
	    mv *.pcap ${SESSION_DIR}/pcap
	fi;

	}
    }
}

node n36 {
    type wlan
    network-config {
	hostname wlan36
	!
	interface wireless
	 ip address 10.0.0.0/32
	 ipv6 address 2001:0::0/128
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {880.0 157.0}
    labelcoords {880.0 189.0}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n4}
    interface-peer {e4 n5}
    interface-peer {e5 n6}
    interface-peer {e6 n7}
    interface-peer {e7 n8}
    interface-peer {e8 n9}
    interface-peer {e9 n10}
    interface-peer {e10 n11}
    interface-peer {e11 n12}
    interface-peer {e12 n13}
    interface-peer {e13 n14}
    interface-peer {e14 n15}
    interface-peer {e15 n16}
    interface-peer {e16 n17}
    interface-peer {e17 n18}
    interface-peer {e18 n19}
    interface-peer {e19 n20}
    interface-peer {e20 n21}
    interface-peer {e21 n22}
    interface-peer {e22 n23}
    interface-peer {e23 n24}
    interface-peer {e24 n25}
    interface-peer {e25 n26}
    interface-peer {e26 n27}
    interface-peer {e27 n28}
    interface-peer {e28 n29}
    interface-peer {e29 n30}
    interface-peer {e30 n31}
    interface-peer {e31 n32}
    interface-peer {e32 n33}
    interface-peer {e33 n34}
    interface-peer {e34 n35}
}

link l1 {
    nodes {n36 n1}
}

link l2 {
    nodes {n36 n2}
}

link l3 {
    nodes {n36 n3}
}

link l4 {
    nodes {n36 n4}
}

link l5 {
    nodes {n36 n5}
}

link l6 {
    nodes {n36 n6}
}

link l7 {
    nodes {n36 n7}
}

link l8 {
    nodes {n36 n8}
}

link l9 {
    nodes {n36 n9}
}

link l10 {
    nodes {n36 n10}
}

link l11 {
    nodes {n36 n11}
}

link l12 {
    nodes {n36 n12}
}

link l13 {
    nodes {n36 n13}
}

link l14 {
    nodes {n36 n14}
}

link l15 {
    nodes {n36 n15}
}

link l16 {
    nodes {n36 n16}
}

link l17 {
    nodes {n36 n17}
}

link l18 {
    nodes {n36 n18}
}

link l19 {
    nodes {n36 n19}
}

link l20 {
    nodes {n36 n20}
}

link l21 {
    nodes {n36 n21}
}

link l22 {
    nodes {n36 n22}
}

link l23 {
    nodes {n36 n23}
}

link l24 {
    nodes {n36 n24}
}

link l25 {
    nodes {n36 n25}
}

link l26 {
    nodes {n36 n26}
}

link l27 {
    nodes {n36 n27}
}

link l28 {
    nodes {n36 n28}
}

link l29 {
    nodes {n36 n29}
}

link l30 {
    nodes {n36 n30}
}

link l31 {
    nodes {n36 n31}
}

link l32 {
    nodes {n36 n32}
}

link l33 {
    nodes {n36 n33}
}

link l34 {
    nodes {n36 n34}
}

link l35 {
    nodes {n36 n35}
}

canvas c1 {
    name {Canvas1}
}

hook 5:datacollect_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

output_dir="/tmp/Data_Collect"
mkdir -p $output_dir
sys_name=`uname -n`
mkdir -p $output_dir/$sys_name
sys_dir=$output_dir/$sys_name

#grab system data
cp -a ${SESSION_DIR}/*.log $sys_dir/
cp -a ${SESSION_DIR}/*.xml $sys_dir/

# grab node data
pushd ${SESSION_DIR}
for dir in `ls -d *.conf`; do
  node=`echo $dir | sed s/.conf//`
  mkdir -p $output_dir/$node
  cp -a $dir/*.pcap* $output_dir/$node/
  cp -a $dir/*.log* $output_dir/$node/
  cp -a $dir/*.drc $output_dir/$node/
  cp -a $dir/if_eth0 $output_dir/$node/
  #cp -a $dir/*.xml $output_dir/$node/
  cp -a $dir/usr.local.etc.quagga/* $output_dir/$node/
done

#chmod -R 777 $output_dir
#chown -R protean.protean $output_dir
popd





}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
    controlnet=172.16.0.0/24
    controlnet_updown_script=
    enablerj45=1
    enablesdt=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

